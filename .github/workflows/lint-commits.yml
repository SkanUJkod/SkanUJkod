name: Validate Commit Messages

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
  push:
    branches-ignore:
      - "**/dependabot/**"

jobs:
  check-commit-messages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit messages from current push
        id: commits
        run: |
          echo "üì• Getting commits from push range: ${{ github.event.before }}..${{ github.sha }}"
          MESSAGES=$(git log --pretty=format:"%s" ${{ github.event.before }}..${{ github.sha }})
          echo "$MESSAGES"
          echo "messages<<EOF" >> $GITHUB_OUTPUT
          echo "$MESSAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Validate commit message convention
        run: |
          VALID=1
          echo "üîç Validating commit messages..."

          REGEX="^(FEAT|BUG|CHORE|TEST|DOCS|REFACTOR)\([a-zA-Z0-9_-]+\):\ .+[^\.](\ \(#\d+\))?$"

          while read -r MSG; do
            echo "üî∏ '$MSG'"
            if [[ ! "$MSG" =~ $REGEX ]]; then
              echo "‚ùå Invalid commit message: '$MSG'"
              VALID=0
            else
              echo "‚úÖ Valid"
            fi
          done <<< "${{ steps.commits.outputs.messages }}"

          if [[ $VALID -eq 0 ]]; then
            echo ""
            echo "‚ùó Commit message must follow this format:"
            echo "  TYPE(Scope): Description [optional (#123)]"
            echo ""
            echo "Where:"
            echo "  TYPE:     FEAT, BUG, CHORE, TEST, DOCS, REFACTOR"
            echo "  Scope:    module or component in parentheses (e.g., CLI, Parser)"
            echo "  Description: lowercase or uppercase start, no trailing period"
            echo "  (#123):   optional reference to issue/PR, must be at end if present"
            exit 1
          fi
